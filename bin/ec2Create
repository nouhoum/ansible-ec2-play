#!/bin/bash

function help {
  echo "Creates an EC2 server."
  echo "This operation takes several seconds, during which time the server is not available."
  echo -e "\nUsage: $(basename $0) [options] instanceId keyPairName classFQ amiId type userId password [description]\n"
  echo "Options are:"
  echo "  -c         Count of instances to launch"
  echo "  -d         Dry run - show command that would be executed"
  echo "  -h         Display help"
  echo "  -p string  Superuser password, set to blahblah if not specified"
  echo "  -q         Quiet mode; suppress all output"
  echo "  -s string  Security group"
  echo "  -u string  Superuser name, set to devops if not specified"
  echo "  -w         Wait until operation is complete before returning"
  echo "  -x         Debug mode"
  echo "  -z string  Availability Zone; defaults to us-east-1c. See http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html"
  echo -e "\nWhere:"
  echo "  instanceId   is the EC2 instance ID"
  echo "  keyPairName  is the name of the key pair, which will be created and stored in the data/ directory if not already defined"
  echo "  classFQ      is one of the instance type values documented here: http://aws.amazon.com/ec2/instance-types/#instance-details, for example: t1.micro"
  echo "  amiId        is the AMI image ID, documented here: https://aws.amazon.com/marketplace/ref=mkt_ste_amis_redirect?b_k=291 and http://cloud-images.ubuntu.com/releases/13.10/release/, for example: ami-4b143122"
  echo "  type         One of: generic, playServer or postgresServer."
  echo "  userId       Ubuntu user id."
  echo "  password     Ubuntu user's password."
  echo "  description  Helps to identify the instance."
  echo ""
  echo "Examples:"
  echo "  Create generic Ubuntu 13.10 micro image in us-east-1c, and wait for the process to complete before returning."
  echo "  Ubuntu user name fred has password yabbadabbadoo."
  echo "  This server's description is 'Load testing server'"
  echo "  $(basename $0) -w testServer testKey t1.micro ami-4b143122 fred yabbadabbadoo 'Load testing server'"
  echo ""
  echo "  Create Play server using Ubuntu 13.10 micro image in us-east-1c, and wait for the process to complete before returning:"
  echo "  $(basename $0) -w testServer testKey t1.micro ami-4b143122 playServer fred yabbadabbadoo"
  echo ""
  echo "  Create Postgres server using Ubuntu 13.10 micro image in us-east-1c, and wait for the process to complete before returning:"
  echo "  $(basename $0) -w testServer testKey t1.micro ami-4b143122 postgresServer fred yabbadabbadoo"
  echo ""
  echo "  Create server with Play and Postgres using Ubuntu 13.10 micro image in us-east-1c, and wait for the process to complete before returning:"
  echo "  $(basename $0) -w testServer testKey t1.micro ami-4b143122 playServers postgresServer fred yabbadabbadoo"
  exit -1
}

set -e

exec 3>&1

function DO {
  if [ "$DRY" ]; then
    echo "$@" >&3
  fi
  echo "$($@)"
}

AZ="--placement AvailabilityZone=us-east-1c"
COUNT="--count 1"
OUTPUT="--output json"
PASSWORD="-p blahblah"
USER="-u devops"
USER_DATA="--user-data HowToUseThis"

while getopts ":c:de:xp:qs:u:z:wh?" opt; do
  case $opt in
    c) COUNT="--count $OPTARG"                    ;;
    d) DRY="--dry-run"                            ;;
    p) PASSWORD="-p $OPTARG"                      ;;
    q) QUIET=true                                 ;;
    s) SECURITY_GROUP="--security-groups $OPTARG" ;;
    u) USER="-u $OPTARG"                          ;;
    w) WAIT=true                                  ;;
    x) DEBUG="-x"                                 ;;
    z) AZ="--placement AvailabilityZone=$OPTARG"  ;;
    *) help                                       ;;
  esac
done
shift $(($OPTIND-1))

if [ $# -lt 6 ] || [ $# -gt 7 ]; then help; fi
if [ "$DEBUG" ]; then set -xv; fi

if [ -z "$ANSIBLE_DATA_DIR" ]; then ANSIBLE_DATA_DIR=.; fi

if [ -z "$1" ]; then
  echo -e "Error: instanceId must be specified.\n"
  help
else
  INSTANCE_ID="$1"
  shift
fi

if [ -z "$1" ]; then
  echo -e "Error: keyPairName must be specified.\n"
  help
else
  KEY_PAIR_NAME="$1"
  KEY_NAME="--key-name $KEY_PAIR_NAME"
  KEY_NAMES="--key-names $KEY_PAIR_NAME"
  PUBLIC_KEY_FILE_NAME=$ANSIBLE_DATA_DIR/$KEY_PAIR_NAME.pem
  shift
fi

if [ -z "$1" ]; then
  echo -e "Error: class must be specified.\n"
  help
else
  CLASS_FQ="--instance-type $1"
  shift
fi

if [ -z "$1" ]; then
  echo -e "Error: AMI ID must be specified.\n"
  help
else
  AMI_ID="$1"
  IMAGE_ID="--image-id $AMI_ID"
  shift
fi

if [ -z "$1" ]; then
  echo -e "Error: type must be specified.\n"
  help
else
  if [[ ! "generic playServer postgresServer" =~ "$1" ]]; then
    echo -e "Error: type '$1' is invalid; must be one of generic, playServer or postgresServer.\n"
    help
  fi
  TYPE="$1"
  shift
fi

if [ -z "$1" ]; then
  echo -e "Error: userId must be specified.\n"
  help
else
  USER_ID="$1"
  shift
fi

if [ -z "$1" ]; then
  echo -e "Error: password must be specified.\n"
  help
else
  PASSWORD="$1"
  shift
fi

if [ -z "$1" ]; then
  DESCRIPTION=""
else
  DESCRIPTION="$1"
  shift
fi

trap '' SIGTERM
if [[ "$(aws ec2 describe-key-pairs $KEY_NAMES 2>&1)" == *"does not exist" ]]; then
  DO aws ec2 create-key-pair $DRY $KEY_NAME > $PUBLIC_KEY_FILE_NAME
fi
trap - SIGTERM

JSON=`DO aws ec2 run-instances $IMAGE_ID $AZ $COUNT $CLASS_FQ $DRY $KEY_NAME $OUTPUT $SECURITY_GROUP $QUIET`

INSTANCE_ID=`echo "$JSON" | grep "InstanceId" | cut -d'"' -f4`
if [ -z "$DRY" ]; then
  data $DEBUG add $INSTANCE_ID $TYPE $USER_ID $PASSWORD $KEY_PAIR_NAME $DESCRIPTION
  if [ "$WAIT" ]; then
    echo -n "Creating..."
    while [ "$(ec2Status $INSTANCE_ID)" == "pending" ]; do
      echo -n "."
      sleep 5
    done
    echo " created."
  fi
fi
