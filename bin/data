#!/bin/bash

function help {
  echo "Maintains $DATA_FILE and hosts.ini"
  echo -e "\nUsage: $(basename $0) [options] operation instanceId [type [parameters]]\n"
  echo "Where:"
  echo "  operation is one of add, ignore or remove."
  #echo "  operation is one of add, ignore, modify or remove."
  echo "  instanceId is the EC2 instance ID to consider"
  echo "  type is one of: generic, playServer or postgresServer"
  echo "  parameters depends on the operation:"
  echo "    add: instanceId, userId, password, publicKey, keySignature"
  echo "    remove: instanceId"
  echo "    ignore: no parameters necessary"
  echo ""
  echo "Options are:"
  echo "  -h        Display help"
  echo "  -x        Debug mode"
  echo ""
  echo "Examples:"
  echo "  data ignore i-234567"
  echo "  data add i-234567 generic userName password publicKey keySignature"
  echo "  data remove i-234567"
  exit -1
}

function NEW_SERVER {
  cat <<EOF
{
  `if [ "$6" ]; then echo " \"keySignature\": \"$6\", "; fi`
  `if [ "$5" ]; then echo " \"publicKey\":\"$5\", "; fi`
  `if [ "$4" ]; then echo " \"password\":\"$4\", "; fi`
  `if [ "$3" ]; then echo " \"user\":\"$3\", "; fi`
  "type":"$2",
  "instanceId":"$1"
}
EOF
}

function TYPE_IDS {
  echo "$DATA" | jq -r ". | map(select(.type == \"$1\")) | .[].instanceId"
}

function TEST_TYPE {
  if [ ! "$3" =~ "generic playServer postgresServer" ]; then
    echo -e "Error: $3 is an unknown type"
    help
  fi
}

if [ -z "$ANSIBLE_DATA_DIR" ]; then ANSIBLE_DATA_DIR=data; fi
DATA_FILE=$ANSIBLE_DATA_DIR/settings

while getopts ":hx?" opt; do
  case $opt in
    x) DEBUG=true ;;
    *) help       ;;
  esac
done
shift $(($OPTIND-1))

if [ $# -lt 2 ]; then help; fi

if [ "$DEBUG" ]; then set -xv; fi

EMPTY_DATA='[]'

if [ ! -d "$ANSIBLE_DATA_DIR" ]; then mkdir -p "$ANSIBLE_DATA_DIR"; fi
if [ ! -f "$DATA_FILE" ] || [ ! -s "$DATA_FILE" ]; then
  echo "$EMPTY_DATA | jq ." > "$DATA_FILE"
fi

DATA="$(cat "$DATA_FILE")"

case "$1" in
  add)
    if [ $# -ne 7 ]; then help; fi
    TEST_TYPE $@
    # TODO check for an entry with the given instanceId and delete it if found
    echo "$DATA" | jq ". += [`NEW_SERVER $2 $3 $4 $5 $6 $7`]" > $DATA_FILE
    ;;

  ignore)
    if [ $# -ne 2 ]; then help; fi
    # TODO check for an entry with the given instanceId and delete it if found
    echo "$DATA" | jq ". += [`NEW_SERVER $2 $3`]" > $DATA_FILE
    ;;

  modify) # Not defined or implemented; must edit data/settings manually
    if [ $# -ne 4 ]; then help; fi
    TEST_TYPE $@
    # TODO this is bogus; need to search for the entry with the given instanceId and modify it
    echo "$DATA" | jq ". -= [`NEW_SERVER $2 $3`]" > $DATA_FILE
    ;;

  remove)
    if [ $# -ne 2 ]; then help; fi
    echo "$DATA" | jq ". | map(select(.instanceId != \"$2\"))" > $DATA_FILE
    ;;

  *)
    echo -e "Error: Unknown operation\n"
    help
esac

DATA="$(cat "$DATA_FILE")"

echo "[generic.domains]" > hosts.ini
TYPE_IDS generic >> hosts.ini
TYPE_IDS playServers >> hosts.ini
TYPE_IDS postgresServers >> hosts.ini

echo -e "\n[playServer.domains]" >> hosts.ini
TYPE_IDS playServers >> hosts.ini

echo -e "\n[postgresServer.domains]" >> hosts.ini
TYPE_IDS postgresServers >> hosts.ini
