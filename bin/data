#!/bin/bash

function help {
  if [ "$1" ]; then echo -e "Error: $1\n"; fi
  echo "Maintains $DATA_FILE and hosts.ini"
  echo -e "\nUsage: $(basename $0) [options] operation instanceId [addParameters]\n"
  echo "Where:"
  echo "  operation is one of add or remove."
  #echo "  operation is one of add, modify or remove."
  echo "  instanceId is the EC2 instance ID to consider"
  echo "  addParameters are only required for the add operation. Consists of:"
  echo "    - type: one of generic, playServer or postgresServer"
  echo "    - rootUserId: super user ID (set by AMI image)"
  echo "    - userId: regular user ID"
  echo "    - password: regular user password"
  echo "    - keyPairName: name of key pair, will be used to name the .pem file in data"
  echo "    - description: optional"
  echo ""
  echo "Options are:"
  echo "  -h        Display help"
  echo "  -x        Debug mode"
  echo ""
  echo "Examples:"
  echo "  data add    i-234568 generic rootUserId myUserName myPassword myKeyPairName"
  echo "  data add    i-234568 generic rootUserId marysUserName marysPassword marysKeyPairName 'Load testing server'"
  echo "  data remove i-234567"
  exit -1
}

function NEW_SERVER {
  case $2 in
    generic) TYPES="[ { \"generic\" : \"notProvisioned\" } ]" ;;
          *) TYPES="[ { \"generic\" : \"notProvisioned\" }, { \"$2\" : \"notProvisioned\" } ]" ;;
  esac
  cat <<EOF
{
  "description":"$6",
  `if [ "$6" ]; then echo " \"keyPairName\":\"$6\", "; fi`
  `if [ "$5" ]; then echo " \"password\":\"$5\", "; fi`
  `if [ "$4" ]; then echo " \"user\":\"$4\", "; fi`
  `if [ "$3" ]; then echo " \"rootUserId\":\"$3\", "; fi`
  "types":$TYPES,
  "instanceId":"$1"
}
EOF
}

function TEST_TYPE {
  if [[ ! "generic playServer postgresServer" =~ "$3" ]]; then
    echo -e "Error: $3 is an unknown type"
    help
  fi
}

set -e

if [ -z "$ANSIBLE_DATA_DIR" ]; then ANSIBLE_DATA_DIR=data; fi
DATA_FILE=$ANSIBLE_DATA_DIR/settings

while getopts ":hx?" opt; do
  case $opt in
    x) DEBUG=true ;;
    *) help       ;;
  esac
done
shift $(($OPTIND-1))

if [ $# -lt 2 ]; then help; fi

if [ "$DEBUG" ]; then set -xv; fi

EMPTY_DATA=\[\]

if [ ! -d "$ANSIBLE_DATA_DIR" ]; then mkdir -p "$ANSIBLE_DATA_DIR"; fi
if [ ! -f "$DATA_FILE" ] || [ ! -s "$DATA_FILE" ]; then
  echo "$EMPTY_DATA" | jq . > "$DATA_FILE"
fi

DATA="$(cat "$DATA_FILE")"

case "$1" in
  add)
    if [ $# -eq 1 ]; then help "Missing instanceId, type, rootUserId, userId, password and keyPairName"; fi
    if [ $# -eq 2 ]; then help "Missing type, rootUserId, userId, password and keyPairName"; fi
    if [ $# -eq 3 ]; then help "Missing rootUserId, userId, password and keyPairName"; fi
    if [ $# -eq 4 ]; then help "Missing userId, password and keyPairName"; fi
    if [ $# -eq 5 ]; then help "Missing password and keyPairName"; fi
    if [ $# -eq 6 ]; then help "Missing keyPairName"; fi
    if [ $# -gt 8 ]; then help "Too many arguments were supplied"; fi
    if [ -z "$7" ]; then
      DESCRIPTION=""
    else
      DESCRIPTION="$7"
    fi
    TEST_TYPE $@
    # TODO check for an entry with the given instanceId and delete it if found
    CONTENTS="$DATA"
    if [ -z "$CONTENTS" ]; then CONTENTS="$EMPTY_DATA"; fi
    echo "$CONTENTS" | jq ". += [`NEW_SERVER $2 $3 $4 $5 $6 \"$DESCRIPTION\"`]" > $DATA_FILE
    ;;

  modify) # Not defined or implemented; must edit data/settings manually
    if [ $# -ne 4 ]; then help; fi
    TEST_TYPE $@
    # TODO this is bogus; need to search for the entry with the given instanceId and modify it
    echo "$DATA" | jq ". -= [`NEW_SERVER $2 $3`]" > $DATA_FILE
    ;;

  remove)
    if [ $# -ne 2 ]; then help; fi
    echo "$DATA" | jq ". | map(select(.instanceId != \"$2\"))" > $DATA_FILE
    ;;

  *)
    echo -e "Error: Unknown operation\n"
    help
esac
