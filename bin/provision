#!/bin/bash

function help {
  echo "Execute Ansible scripts to create and set up all server types using Ansible scripts: generic Ubuntu, Play and Postgres"
  echo -e "\nUsage: $(basename $0) [options]\n"
  echo "Options can include:"
  echo "    -d causes the script to be dry run"
  echo "    -h Display help information"
  echo "    -v increments verbose output (can be specified up to 3 times)"
  echo "    -x debug mode"
  exit -1
}

function TYPE_IDS {
  #echo "$DATA" | jq -r "[.[]|select(.types[].$1 == \"notProvisioned\")|.instanceId]|sort|unique|.[]"
  echo "$DATA" | jq -r "[.[]|select(.types[].$1 == \"notProvisioned\")|.instanceId]|.[]"
}

function DNS_NAMES {
  for h in `TYPE_IDS $1`; do ec2Info -n $h; done
}

set -e

while getopts "dhvx?" opt; do
  case $opt in
    h ) help                  ;;
    x ) DEBUG="-x"            ;;
    v ) VERBOSE="-v $VERBOSE" ;;
    \?) help                  ;;
  esac
done
shift $(($OPTIND-1))

if [ "$DEBUG" ]; then set -xv; fi

if [ -z "$ANSIBLE_DATA_DIR" ]; then ANSIBLE_DATA_DIR=data; fi
DATA_FILE=$ANSIBLE_DATA_DIR/settings

DATA="$(cat "$DATA_FILE")"

echo "[generic.domains]" > hosts.ini
DNS_NAMES generic >> hosts.ini
DNS_NAMES playServers >> hosts.ini
DNS_NAMES postgresServers >> hosts.ini

echo -e "\n[playServer.domains]" >> hosts.ini
DNS_NAMES playServers >> hosts.ini

echo -e "\n[postgresServer.domains]" >> hosts.ini
DNS_NAMES postgresServers >> hosts.ini


# Generic Ubuntu servers
bin/run $DEBUG $VERBOSE "$@" bootstrap
RC=$?
if [ 0 == $RC ]; then
  echo "Generic servers have been provisioned. TODO Remove Contents from generic.domains section of hosts.ini"
else
  echo "Error: Generic server provisioning failed"
fi

# Postgres servers
if [ $RC == 0 ]; then
  bin/run $DEBUG $VERBOSE "$@" postgresEnv
  RC=$?
fi
if [ $RC == 0 ]; then
  echo "Postgres servers have been provisioned. TODO Remove Contents from postgres.domains section of hosts.ini"
  #TODO psql restore for each RDS Postgres server and each server mentioned in the postgres.domains section of hosts.ini
else
  echo "Error: Postgres server provisioning failed"
fi

if [ $RC == 0 ]; then
  bin/run $DEBUG $VERBOSE "$@" playEnv
  RC=$?
fi

if [ $RC == 0 ]; then
  bin/run $DEBUG $VERBOSE "$@" playService
  RC=$?
else
  echo "Error: Play server environment setup(s) failed"
fi

if [ $RC == 0 ]; then
  bin/run $DEBUG $VERBOSE "$@" playDeploy
  RC=$?
else
  echo "Error: Installation of Play application service(s) failed"
fi

if [ $RC == 0 ]; then
  bin/run $DEBUG $VERBOSE "$@" playLaunch
else
  echo "Error: Play application deployment to server(s) failed"
fi

if [ $RC == 0 ]; then
  echo "Postgres servers have been provisioned. TODO Remove Contents from play.domains section of hosts.ini"
  echo "All done!"
else
  echo "Error: Play application launch(es) failed"
fi

#rm -f "$DATA_FILE"
