#!/bin/bash

function help {
  echo "Execute an Ansible script as the current user or superuser"
  echo -e "\nUsage: $(basename $0) [options]\n"
  echo "Options can include:"
  echo "    -d causes the script to be dry run"
  echo "    -h Display help information"
  echo "    -v Increments verbose output (can be specified up to 3 times)"
  echo "    -x Debug mode"
  SCRIPTS="$(cd yaml; for s in *.yaml; do echo -n "$COMMA ${s:0:${#s} - 5}"; COMMA=","; done)"
  echo ""
  echo "Where:"
  echo "  script is one of $SCRIPTS"
  echo ""
  echo "This script makes an attempt to install missing dependencies for Mac and Ubuntu"
  exit -1
}

function CHECK_PACKAGE {
  if [ -z "$(which $1)" ]; then
    case $(uname -v) in
      *Ubuntu*)
        echo "$1 is not installed, installing it now."
        sudo apt-get install $2 -qy
        ;;

      *Darwin*)
        echo "$1 is not installed, installing it now."
        brew install $2
        ;;

      *)
        echo "Error: $1 is not installed, please install it and try again."
        exit -3
       ;;
    esac
  fi
}

# Make the root directory of this project current
DIR="$( cd "$( dirname "${bash_source[0]}" )" && pwd )"
cd $DIR

verbose=""
while getopts "dhstvx?" opt; do
  case $opt in
    d ) DRYRUN="--check" ;;
    h ) help ;;
    x ) DEBUG="-x" ;;
    v ) verbose="-v $verbose" ;;
    \?) help ;;
  esac
done
shift $(($OPTIND-1))

if [ -z "$1" ]; then help; fi

if [ "$verbose" ]; then echo "Running from $(pwd)"; fi

if [ "$DEBUG" ]; then set -xv; fi

if [ -f bin/custom ]; then
  source bin/custom
else
  cp bin/custom{.sample,}
  echo "Error: bin/custom does not exist. A sample file has just been created for you."
  echo "Edit the file as required, then run this command again."
  exit -2
fi

CHECK_PACKAGE ansible-playbook ansible
CHECK_PACKAGE jq jq
CHECK_PACKAGE pip python-pip
if [ -z "$(which pip)" ]; then easy_install pip; fi
if [ -z "$(which aws)" ]; then pip install awscli; fi

if [[ `cat hosts.ini | wc -w` == 3 ]]; then
  echo "Error: hosts.ini is empty. You need to create servers with the ec2Create command before attempting to provision them."
  exit -4
fi

ansible-playbook $DRYRUN $verbose -i hosts.ini yaml/$1.yaml -u ubuntu
